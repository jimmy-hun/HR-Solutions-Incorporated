// Name: 	SortDepartmentByName 
// Purpose:	sort departments  
// Passed: 	List<Map.Entry> departmentList
// Returns: Nothing
// Input: 	Nothing
// Output: 	Nothing
// Effect: 	sorts the passed departmentList
	private void SortDepartmentByName(List<Map.Entry> departmentList)
	{
		// collection sorter for departmentList, creates a Comparator for the Map.Entry keys and values in the list
		// under the rules defined in the {} 
		// NOTE: 	compare(Map.Entry m1, Map.Entry m2) compares two values of the same type and orders by: a-z or 1-9
		//			it also auto 'increments and loops' or goes over all items... map: (a z c b) => s1.compareToIgnoreCase(s2) would do:
		//			a z c b ... a z ... a is before z ... a z c b
		//			z c b ... z c ... c is before z ... a c z b
		//			z b ... z b ... b is before z ... a c b z ... REPEATS AGAIN TILL ALPHABETICAL/NUMERICAL ORDER
		Collections.sort(departmentList, new Comparator<Map.Entry>() {
			public int compare(Map.Entry m1, Map.Entry m2)
			{
				Department d1 = (Department) m1.getValue(); // make d1 have the value of m1
				Department d2 = (Department) m2.getValue(); // make d2 have the value of m2

				String s1 = d1.getName(); // make s1 equal d1's name
				String s2 = d2.getName(); // make s2 equal d2's name

				// compareTo compares the 2 together by alphabetical/numerical order depending type
				return s1.compareToIgnoreCase(s2);
			}
		});
	}

// Name: 	SortEmployeeByPayLevel 
// Purpose:	sort employees  
// Passed: 	List<Map.Entry> employeeList
// Returns: Nothing
// Input: 	Nothing
// Output: 	Nothing
// Effect: 	sorts the passed employeeList

	public void SortEmployeeByPayLevel(List<Map.Entry> employeeList)
	{
		// collection sorter for employeeList, creates a Comparator for the Map.Entry keys and values in the list
		// under the rules defined in the {} 
		// NOTE: 	compare(Map.Entry m1, Map.Entry m2) compares two values of the same type and orders by: a-z or 1-9
		//			it also auto 'increments and loops' or goes over all items... map: (a z c b) => s1.compareToIgnoreCase(s2) would do:
		//			a z c b ... a z ... a is before z ... a z c b
		//			z c b ... z c ... c is before z ... a c z b
		//			z b ... z b ... b is before z ... a c b z ... REPEATS AGAIN TILL ALPHABETICAL/NUMERICAL ORDER
		Collections.sort(employeeList, new Comparator<Map.Entry>() {
			public int compare(Map.Entry m1, Map.Entry m2)
			{
				Employee e1 = (Employee) m1.getValue(); // make i1 have the value of m1
				Employee e2 = (Employee) m2.getValue(); // make i2 have the value of m2

				Integer i1 = e1.getPayLevel(); // make i1 equal e1's name
				Integer i2 = e2.getPayLevel(); // make i2 equal e2's name

				// compareTo compares the 2 together by alphabetical/numerical order depending type
				return i2.compareTo(i1);
			}
				});
		
	}